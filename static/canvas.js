let canvas;
let context;
let game_animation;
animate_indexPage();

let xhttp;
let form;
let username;
let score;
let enemies_killed;
let coins;
let time_alive;

let score_display;
let enemy_count_display;
let time_alive_display;

let now;
let fpsInterval;  // 60fps
let then = Date.now();



const songs = [
    "Arroz Con Pollo.mp3",
    "Modern Jazz Samba.mp3",
    "Tango de Manzana.mp3",
    "Verano Sensual.mp3",
];
let background_song = songs[randint(0, songs.length - 1)];



let terrain_background = [
    [108,71,70,71,28,71,70,71,70,107,7,7,7,7,7,7,7,7,8,6,76,107,7,7,7,7,7,7,7,7,7,7,7,7,7,108,86,87,70,87,103,86,86,87,28,103,102,103,71,9,86,70,71,103,86,23,71,86,103,87,86,87,71,71,71,23,103,70,23,86,23,70,102,71,87,103,87,70,86,86,87,103,71,102,102,87,71,70,71,86,103,87,86,70,102,86,71,71,102,103,71,102,86,87,87,102,103,24,58,74,104,72,88,88,72,88,104,72,104,72,72,88,121,121,121,121,121,136,136,121,136,136,136,136,121,120,120,121,121,121,121,121,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,203,166,166,166,203,205,203,203,166,166,201,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,139,140,182,182,176,302,180,302,303,303,178,302,182,182,287,180,182,287,303,303,303,302,302,303,303,302,303,302,302,302,287,303,302,302,303,302,302,287,303,302,302,302,287,287,287,303,303,303,303,287,302,302,303,302,287,303,303,287,302,287,302,302,303,302,303,303,287,287,303,287,287,287,303,303,287,287,303,302,287,302,302,303,287,303,303,287,302,303,303,287,302,287,287,303,302,303,302,287,302,287,303,302],
    [86,87,86,87,27,55,55,55,55,55,55,55,55,55,55,55,11,102,24,22,28,87,87,71,71,102,70,102,103,103,87,70,87,86,102,102,87,103,102,103,71,103,103,71,28,70,87,102,71,43,103,71,41,27,87,86,87,103,87,86,23,71,86,86,87,102,86,103,70,102,23,87,103,87,87,86,70,102,87,102,87,71,87,70,70,70,71,102,102,103,87,71,71,86,87,70,103,103,103,70,87,70,71,70,87,70,70,24,72,88,58,73,88,104,88,72,88,104,88,88,72,121,88,121,121,136,136,120,136,120,120,121,121,121,121,121,121,121,121,121,121,121,121,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,205,205,166,166,205,203,205,203,203,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,176,287,182,302,302,287,176,302,176,287,303,303,182,178,182,302,180,303,302,287,302,302,287,303,303,287,287,303,303,287,302,302,303,287,303,303,303,303,302,303,302,302,302,302,302,287,287,302,303,287,303,287,303,303,303,303,303,287,303,287,303,303,302,287,302,302,287,303,287,303,302,302,287,287,303,303,287,303,302,302,302,303,287,302,302,287,302,287,302,302,303,287,302,287,287,302,303,303,287,303],
    [90,55,55,55,43,103,102,103,9,55,55,55,55,55,55,55,25,102,24,73,25,87,70,102,23,70,103,70,102,71,71,103,71,103,103,102,86,70,86,103,103,86,70,87,28,87,86,86,71,103,86,87,43,103,86,86,26,70,26,70,70,87,23,102,87,23,86,26,102,86,70,87,70,87,71,70,87,71,70,86,103,103,103,103,103,87,103,71,103,70,71,102,71,86,70,102,71,87,86,70,86,70,87,70,86,103,71,24,88,57,104,72,104,74,72,104,88,88,121,88,72,72,72,104,121,121,121,136,120,120,120,121,120,136,120,120,120,121,136,136,121,121,121,184,166,130,166,166,166,130,166,166,166,130,166,166,166,130,203,166,166,205,203,205,166,205,166,205,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,130,180,182,303,287,303,302,176,180,180,182,178,178,287,303,180,303,287,287,303,302,302,302,302,302,287,302,302,287,287,303,302,302,303,287,302,302,303,303,287,302,302,302,303,302,302,302,303,302,302,302,303,303,303,303,302,287,302,303,303,303,303,302,303,287,303,303,302,303,302,303,287,303,303,303,303,303,302,302,287,302,303,287,303,303,302,287,287,287,302,302,302,287,303,287,303,302,287,303,302,287],
    [22,71,70,71,70,71,70,71,28,102,102,71,87,71,87,71,44,87,24,57,25,103,87,70,103,70,70,23,71,71,87,102,102,102,71,70,70,103,70,70,86,70,102,103,28,86,103,102,10,103,71,70,27,86,103,11,87,26,102,70,23,70,71,86,102,103,86,87,102,26,71,103,23,70,103,86,102,87,70,87,86,86,71,103,71,70,87,86,102,86,102,86,86,87,71,70,71,103,103,87,102,102,86,87,103,87,86,107,8,88,104,72,72,88,72,104,88,88,88,121,72,104,88,104,104,121,121,121,121,121,121,121,121,121,121,121,136,136,120,121,136,121,121,184,184,166,166,166,166,166,166,166,166,166,166,166,166,166,203,203,205,205,205,166,166,166,166,166,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,303,303,176,178,303,178,178,178,287,182,303,176,303,176,180,182,287,287,303,287,303,302,303,302,303,303,303,302,303,287,302,303,302,287,287,302,302,302,302,303,287,303,287,302,287,303,302,287,287,287,303,287,303,303,303,287,287,302,303,287,287,303,287,303,302,287,303,303,287,287,287,302,303,303,287,287,287,302,302,302,303,302,287,303,302,302,302,302,287,287,287,302,303,302,302,302,287,303,302,302],
    [22,87,86,87,86,23,86,87,28,71,87,103,86,102,103,103,87,103,75,76,71,87,103,102,103,103,87,70,103,70,87,12,103,70,70,86,103,70,70,71,86,86,87,103,28,87,71,103,25,102,71,42,71,71,10,11,25,26,71,102,71,103,71,71,70,86,23,103,23,26,103,26,70,71,103,71,70,102,70,103,103,87,103,102,71,103,70,102,70,71,87,87,70,87,102,102,103,86,70,102,70,86,102,102,87,102,86,70,24,57,58,74,88,104,104,88,104,104,72,121,121,88,72,88,72,104,120,121,121,121,121,121,121,121,121,121,120,136,120,120,136,121,121,184,184,184,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,287,178,176,302,303,178,287,303,287,287,303,176,176,287,287,287,303,303,287,303,287,303,303,287,287,302,302,302,287,302,303,287,287,303,287,302,303,302,302,302,303,303,287,303,287,302,287,287,303,287,302,303,303,302,287,302,302,287,302,303,303,287,302,302,302,287,302,302,302,303,303,303,287,302,287,303,287,287,287,303,287,302,287,303,287,302,303,303,287,303,302,302,302,302,287,287,303,302,287,302],
    [22,103,102,103,102,103,102,103,28,103,102,70,70,71,86,87,87,102,59,60,87,87,70,102,103,54,55,55,42,56,91,60,70,87,86,102,102,71,71,87,70,71,103,103,28,103,103,103,102,70,70,11,103,71,102,26,9,71,70,23,87,103,23,87,86,102,71,26,87,70,23,26,86,70,86,86,103,102,87,86,70,103,70,103,70,86,70,71,102,103,71,102,103,70,86,103,87,103,103,71,103,86,70,70,103,71,70,70,24,72,57,88,88,104,104,88,72,88,104,104,88,88,72,104,104,104,88,121,121,121,121,120,136,136,136,136,136,121,136,136,121,121,121,184,184,187,187,184,185,185,185,184,184,187,187,187,184,187,182,180,182,182,176,176,182,182,180,180,182,178,176,182,178,178,182,180,178,178,176,182,180,178,178,180,178,182,178,178,178,178,176,180,176,180,180,176,182,176,176,176,176,303,178,182,303,287,178,182,302,182,303,176,178,302,182,182,302,303,303,303,303,287,287,287,287,287,302,302,302,302,302,302,302,287,302,287,303,302,287,302,287,287,303,303,302,302,303,287,303,287,287,287,303,303,302,302,303,302,287,303,287,287,287,287,302,303,303,303,303,287,303,303,302,302,303,287,303,303,302,287,302,287,303,302,303,303,303,302,287,302,287,303,287,303,302,287,287,303,287,287],
    [22,71,70,71,70,71,70,71,28,102,70,70,87,87,103,103,71,86,107,108,70,86,70,87,87,71,102,91,60,54,74,73,90,55,55,55,55,55,55,55,55,55,55,55,25,87,70,103,87,71,87,71,71,23,103,86,11,87,71,71,86,103,23,26,70,26,23,26,86,103,70,86,70,70,103,87,103,71,86,86,70,86,87,87,70,103,87,87,71,102,102,103,87,71,102,103,71,87,71,70,87,103,70,71,70,102,71,70,24,88,73,57,88,104,88,72,72,104,88,88,72,72,104,104,104,104,120,120,121,120,121,136,136,121,120,136,121,136,120,136,136,121,121,184,184,184,185,184,187,184,187,184,184,185,187,185,184,187,176,182,178,180,180,176,178,182,178,176,178,176,176,178,180,178,176,178,180,182,178,176,176,176,180,180,180,178,182,182,176,182,180,182,176,182,182,182,178,176,176,180,303,176,176,182,287,302,182,302,287,303,302,180,176,178,180,180,176,302,302,303,302,303,287,287,287,302,303,302,303,303,287,303,302,303,303,287,287,287,303,302,287,303,302,302,302,303,302,303,302,303,302,303,302,287,287,287,303,287,287,303,287,303,287,287,287,302,302,287,303,302,287,302,302,303,287,302,287,303,303,303,303,287,302,302,287,302,287,302,303,302,302,287,287,287,287,302,287,287,303,287],
    [22,87,86,87,86,87,86,87,28,102,71,87,70,71,71,71,71,71,87,71,71,87,87,71,102,87,86,75,103,54,58,57,106,55,55,55,55,55,55,55,55,55,55,55,43,23,102,71,70,87,102,86,23,102,71,102,26,103,70,86,71,70,23,23,87,86,71,102,102,26,86,70,87,87,86,70,86,102,86,86,70,102,86,70,71,102,103,103,102,71,71,103,87,70,103,71,70,86,102,102,103,70,70,102,86,103,103,87,24,73,73,73,104,104,72,104,88,88,88,72,104,104,104,88,121,121,136,120,120,120,120,120,136,120,120,136,120,120,121,121,120,121,121,184,185,187,187,187,185,185,187,184,185,184,185,185,187,184,176,180,178,176,176,178,182,176,180,180,176,182,180,176,180,180,182,178,178,180,182,176,182,176,180,178,176,178,180,178,182,178,182,178,180,180,180,180,176,182,176,182,178,287,178,176,287,287,302,182,180,180,182,302,302,176,182,176,178,302,302,287,303,287,303,302,287,287,303,302,303,303,302,287,303,287,302,287,302,287,287,303,302,302,303,303,303,302,303,287,303,287,302,302,303,302,303,303,287,303,287,287,303,287,287,287,287,302,287,287,287,303,287,287,303,303,302,303,287,303,303,287,303,303,303,287,302,302,302,302,302,302,287,303,303,302,287,302,287,303,303,303],
    [22,86,70,87,103,71,103,102,28,102,86,70,103,70,70,86,70,71,70,86,71,71,70,103,23,87,26,28,26,86,75,76,87,71,103,102,71,86,86,86,102,70,23,71,71,102,71,87,70,103,70,26,86,71,26,86,23,26,70,70,102,26,70,87,87,87,26,23,87,87,71,70,71,103,86,103,71,103,87,102,71,86,87,102,103,103,86,70,70,103,103,102,71,71,103,103,103,71,87,102,103,71,87,103,70,86,102,102,24,57,88,74,88,104,104,104,104,104,104,72,72,121,72,121,121,136,136,121,121,121,121,120,120,121,121,120,121,120,136,136,136,121,121,184,184,185,184,184,185,184,185,185,185,185,187,187,187,185,182,178,182,180,176,180,180,180,182,180,180,182,176,180,178,178,176,176,182,176,182,178,176,178,178,180,180,176,176,178,180,178,176,180,180,180,180,178,176,176,178,176,178,287,180,180,302,180,176,176,303,287,180,178,302,182,176,303,178,287,287,303,287,302,303,302,302,303,302,303,302,287,287,287,303,302,303,302,287,302,303,302,287,302,303,287,303,303,303,303,303,287,302,303,287,302,303,302,302,302,303,302,303,303,287,302,287,287,287,287,303,302,303,303,302,303,302,303,303,303,302,303,287,287,302,302,302,287,303,302,303,302,287,303,287,303,303,287,302,287,302,287],
    [22,103,87,70,70,86,102,87,28,86,87,103,102,86,70,102,87,70,70,70,86,86,102,102,12,102,102,41,55,55,25,28,86,102,71,86,86,86,71,71,86,86,102,71,70,103,87,102,87,87,71,87,71,86,26,26,26,70,70,86,70,86,102,86,71,26,86,23,70,103,26,103,87,87,102,103,102,103,71,103,70,86,71,102,86,70,86,103,87,86,103,87,70,103,71,103,103,86,70,103,103,103,103,86,87,70,71,87,24,74,57,57,58,88,72,88,72,104,88,88,72,72,121,104,121,120,121,120,120,121,120,120,120,120,120,121,136,120,121,121,121,121,121,184,184,185,184,187,184,184,184,187,187,184,187,184,187,187,180,180,176,176,178,182,180,182,176,176,180,176,182,176,180,182,176,178,176,182,180,182,180,180,180,176,178,176,180,180,176,180,180,180,180,180,176,180,180,180,176,180,182,176,180,180,182,287,303,303,287,303,176,180,302,287,180,303,178,303,302,302,303,287,287,303,302,302,303,302,287,303,302,287,302,302,303,287,287,287,287,287,302,302,303,302,303,287,287,287,303,303,287,287,287,287,303,303,302,303,302,303,287,303,287,302,303,287,303,303,287,302,287,287,287,287,302,287,302,287,303,302,287,287,303,303,302,303,302,303,303,303,302,302,302,287,287,287,303,287,303,303],
    [22,71,102,71,23,70,87,103,28,103,70,71,70,23,70,71,70,86,103,70,70,71,70,71,28,71,70,86,102,102,59,60,71,71,87,102,87,103,102,102,86,102,71,102,103,103,102,70,71,86,23,102,103,86,103,71,26,23,87,87,71,102,26,26,23,71,103,86,87,87,23,70,70,86,102,87,103,102,70,103,103,70,103,103,86,103,103,87,102,87,103,86,71,70,70,86,103,103,86,102,71,87,70,71,87,103,71,71,24,104,88,88,104,88,88,72,88,88,88,88,72,72,104,121,121,121,121,120,120,121,121,121,120,136,136,121,136,120,136,120,121,121,121,184,187,187,184,187,185,187,187,187,187,184,184,185,184,187,176,180,182,180,180,176,182,180,182,180,176,182,178,182,176,180,176,176,182,178,180,178,182,182,178,176,176,182,176,182,180,176,178,180,182,180,182,180,180,180,180,182,287,180,303,176,182,303,176,303,303,182,303,287,176,176,176,178,176,303,302,287,303,302,287,302,303,302,287,287,287,287,303,302,303,302,303,287,302,287,287,302,303,303,287,287,287,303,302,302,287,287,287,302,302,287,302,287,302,287,287,302,303,302,302,303,303,287,303,303,287,303,287,287,303,303,303,303,302,302,287,287,303,287,302,287,287,303,287,303,287,303,302,302,302,303,287,303,302,303,303,287],
    [22,86,70,103,102,71,87,103,28,87,86,87,86,103,103,87,70,103,86,87,103,87,86,87,28,103,71,103,71,86,107,22,103,86,86,86,70,87,70,86,103,87,86,87,71,86,70,102,102,103,71,103,23,23,87,71,102,103,23,26,70,26,86,70,102,26,102,103,26,87,26,71,86,86,86,87,71,102,71,86,87,87,103,86,102,102,87,87,86,102,71,70,87,70,87,71,70,71,86,87,102,102,71,87,86,103,71,70,24,58,74,88,88,88,72,104,72,88,72,72,88,72,104,121,121,121,121,121,121,121,121,121,136,121,136,121,136,121,136,121,136,121,121,184,187,185,187,185,187,184,187,185,184,185,184,185,185,184,178,176,176,180,180,180,176,176,182,182,180,182,180,180,180,182,178,180,180,182,178,178,182,176,176,182,182,180,180,180,178,176,180,178,176,178,176,182,182,180,178,178,302,302,287,303,303,182,303,180,287,178,180,182,303,182,287,182,303,303,303,302,302,303,302,287,287,287,303,303,287,303,287,302,302,302,302,303,302,287,287,302,302,303,303,287,303,302,303,287,303,303,287,302,287,287,302,303,302,303,302,302,302,303,287,287,302,303,302,287,287,287,303,302,302,302,303,287,287,287,287,302,303,302,302,303,302,302,287,303,287,302,287,303,303,303,287,303,303,303,302,303],
    [22,86,86,87,70,87,103,86,28,102,102,103,102,103,87,70,86,87,70,86,86,103,102,70,28,103,70,86,102,103,102,22,102,87,102,86,102,71,102,70,102,103,71,102,102,70,102,86,86,86,23,86,102,103,26,87,87,86,26,87,26,71,71,103,103,103,102,23,102,86,103,86,71,102,70,87,70,70,102,103,102,102,86,103,86,70,103,70,103,102,71,70,87,71,70,102,102,103,102,102,103,71,71,102,87,103,71,71,24,88,74,104,104,88,104,104,72,88,88,88,72,88,128,121,136,136,136,120,120,121,120,121,136,136,121,121,121,136,121,121,120,121,121,184,187,184,184,184,185,184,184,184,185,187,187,185,184,184,180,182,182,178,178,178,182,178,180,182,182,178,178,182,176,176,178,178,182,182,180,180,176,176,182,178,178,178,178,180,176,182,178,178,176,178,178,180,180,176,178,178,302,303,182,180,178,182,302,302,176,176,287,287,302,176,303,178,303,302,287,287,287,287,303,303,303,287,303,302,302,302,303,287,303,302,302,303,287,302,302,303,303,287,303,302,303,302,287,302,302,303,287,287,287,303,302,287,302,303,287,303,303,302,302,287,287,287,302,303,303,302,302,287,287,302,302,287,302,302,287,302,287,303,303,303,303,303,287,287,303,287,302,287,287,303,303,303,302,287,302,302],
    [22,87,102,71,103,70,103,87,28,87,70,71,70,70,87,103,86,102,87,103,102,87,102,71,28,71,103,71,87,103,54,108,87,70,86,70,87,103,86,71,87,103,86,23,87,103,70,103,70,103,70,26,102,23,70,102,71,86,87,26,70,86,71,102,26,70,102,103,103,70,23,102,86,86,70,102,102,86,86,70,103,86,102,86,103,102,71,86,70,86,71,86,102,103,103,87,87,70,86,103,86,71,87,102,86,87,102,103,24,57,58,72,88,88,88,88,72,104,88,104,72,72,72,121,121,120,120,120,136,121,136,120,120,121,120,121,121,120,136,121,136,121,121,184,185,185,185,184,187,187,184,187,185,184,187,187,185,187,178,182,178,182,176,176,176,180,182,176,180,180,182,176,182,178,176,180,176,182,176,180,180,178,178,182,182,182,180,178,176,182,178,178,176,176,182,182,176,182,182,178,176,180,182,176,302,287,178,176,182,302,178,180,287,303,302,178,302,302,287,287,287,302,303,303,287,303,287,303,303,287,302,302,303,287,302,302,303,287,287,303,302,303,303,303,287,302,287,303,302,303,302,303,303,287,303,287,303,302,287,287,287,303,303,303,287,302,287,303,302,303,287,287,303,302,287,302,287,287,287,287,287,287,302,303,287,287,287,303,287,303,303,287,287,302,303,287,287,302,302,287],
    [22,71,86,71,102,71,87,103,28,70,86,87,102,87,102,86,103,87,86,70,86,71,103,86,28,87,70,71,86,87,86,71,86,70,71,87,86,70,86,103,87,102,103,102,70,71,70,102,103,87,70,26,70,26,86,23,23,71,23,103,23,87,26,102,71,87,23,86,70,102,23,87,71,102,103,103,103,86,87,71,103,103,70,70,87,86,70,86,86,87,87,87,87,71,71,102,71,71,87,86,70,86,70,86,87,86,87,70,24,104,88,104,72,104,88,88,88,72,104,88,104,88,88,121,120,136,120,121,121,121,120,136,136,120,136,121,120,120,120,121,121,121,121,184,184,184,187,184,184,185,185,185,185,184,187,185,185,187,182,178,182,176,182,182,182,176,180,178,182,180,178,182,182,182,180,180,182,180,182,182,176,180,176,178,176,180,182,176,180,178,178,178,176,182,182,180,182,180,178,176,303,180,178,302,178,287,303,182,178,303,303,302,302,302,178,303,287,302,302,287,287,287,302,302,287,303,303,302,302,287,287,302,287,287,303,302,287,287,287,303,302,287,303,287,287,303,302,302,287,302,302,303,287,287,287,287,303,287,302,303,302,303,302,303,287,287,302,302,302,303,303,303,302,302,287,303,287,287,287,302,303,303,303,287,302,287,287,302,287,303,302,302,303,287,303,303,303,302,302,302],
    [22,102,87,70,103,87,71,71,28,70,102,70,86,102,70,70,87,87,86,86,70,102,103,86,41,11,23,70,87,103,70,71,86,87,102,87,70,86,86,87,103,71,86,70,86,87,71,70,103,70,70,23,103,26,86,71,26,87,103,87,86,87,102,71,70,71,87,87,103,23,103,103,103,87,87,103,71,102,86,71,86,103,86,71,87,87,102,102,70,102,87,103,102,102,103,102,86,71,86,102,87,102,87,86,102,103,103,102,24,104,58,88,104,72,88,104,88,72,72,104,104,72,104,72,136,121,128,128,121,121,120,121,136,136,121,120,121,136,120,120,136,121,121,184,184,184,185,187,185,184,184,184,184,187,184,187,184,185,176,178,182,176,176,182,176,176,180,178,180,178,176,176,178,180,182,178,180,178,182,182,180,176,180,176,176,180,176,176,180,178,180,180,176,182,178,176,182,176,178,176,180,176,178,287,302,287,178,302,302,176,176,182,287,180,182,180,178,302,302,302,287,287,287,287,287,287,287,302,302,302,287,303,287,303,303,287,287,302,303,302,287,302,302,287,303,303,303,287,302,303,303,287,287,303,287,302,303,303,302,287,302,287,303,302,302,302,302,303,303,303,303,287,303,287,302,302,302,287,303,303,303,303,303,303,287,303,302,302,287,287,303,303,287,287,302,303,302,303,287,287],
    [38,39,39,92,103,102,70,87,27,55,55,55,55,55,55,55,56,70,86,87,102,102,103,70,71,28,102,103,86,87,103,86,71,86,103,70,71,86,103,70,87,71,70,103,71,103,86,102,72,58,38,23,87,23,87,103,26,26,87,102,103,87,87,87,102,86,87,86,26,70,102,71,71,102,86,86,70,103,71,87,70,70,70,86,70,103,86,71,87,71,87,103,102,86,103,71,87,87,70,103,71,86,86,102,86,103,71,86,24,74,58,72,88,88,88,104,72,72,72,72,72,72,88,88,88,128,128,128,121,121,136,120,121,121,121,136,136,120,121,136,121,121,121,184,185,185,187,185,185,187,184,187,184,185,184,187,185,187,176,180,182,182,180,176,178,178,176,182,178,180,180,180,176,176,176,180,182,176,178,178,176,178,180,176,176,182,182,178,180,178,176,178,176,182,180,176,176,182,180,180,178,287,287,176,180,176,176,178,180,302,178,287,287,176,180,176,287,303,287,302,302,303,287,303,287,287,287,302,287,303,302,302,287,302,302,302,302,303,287,303,302,302,303,303,303,287,287,302,302,302,303,303,287,303,303,303,302,287,287,302,287,287,303,303,287,287,302,303,303,303,303,303,303,302,303,287,302,302,302,302,302,302,302,287,303,303,302,303,302,287,303,302,303,303,302,287,302,303,302,287],
    [88,104,88,38,39,92,71,102,28,87,87,70,71,70,71,70,71,86,87,102,70,87,71,102,70,28,70,87,86,102,71,71,103,102,86,87,71,71,71,71,87,87,102,70,103,102,86,8,60,75,88,23,87,26,103,23,26,26,102,103,87,23,26,103,23,87,102,26,71,23,23,86,26,103,86,102,71,87,86,86,71,71,87,86,87,86,87,103,70,71,86,70,102,102,86,71,70,70,70,71,86,71,71,102,102,86,103,91,40,58,72,104,72,88,88,104,88,72,72,72,104,88,88,88,72,72,121,120,136,120,121,136,121,121,120,121,121,121,136,136,120,121,121,184,187,184,185,185,187,184,185,184,185,184,187,185,185,185,178,176,180,176,180,178,180,178,178,178,176,176,178,180,176,180,176,176,178,180,176,176,178,180,178,180,182,176,180,176,176,182,180,176,182,182,178,178,182,178,178,180,182,182,176,182,287,182,180,178,178,302,176,178,287,178,178,178,182,302,302,287,303,303,302,287,303,287,287,303,287,302,287,303,302,287,287,287,287,302,302,302,287,302,303,287,287,287,303,303,287,303,287,303,287,287,303,302,287,302,303,303,303,287,303,302,303,302,303,303,287,303,302,287,287,287,302,303,303,302,303,302,302,287,287,287,303,303,303,303,287,287,287,303,287,303,303,303,303,302,303,303],
    [72,88,88,104,104,38,39,39,60,87,70,86,87,86,87,102,103,86,86,87,102,86,86,71,103,28,70,102,87,71,103,71,71,86,103,102,87,86,102,71,86,87,86,71,103,71,73,74,8,60,7,71,102,70,70,23,103,26,23,71,102,87,71,70,71,103,102,102,71,103,102,102,55,86,70,103,102,102,102,71,87,86,103,103,102,87,103,103,70,70,70,70,71,102,102,86,71,71,103,102,71,71,102,102,103,86,102,24,104,57,104,104,88,104,72,88,104,88,104,88,104,104,104,72,88,104,136,136,120,136,121,121,136,121,120,121,121,120,120,120,120,121,121,184,187,187,185,184,185,187,187,187,185,187,184,184,187,185,182,182,178,182,178,178,180,182,180,180,182,176,178,182,180,176,182,180,178,180,182,176,178,178,180,176,182,180,178,180,176,176,178,176,180,178,180,176,176,176,180,178,178,176,176,180,182,178,287,178,176,303,182,302,303,287,287,303,176,302,303,303,287,303,303,287,287,302,303,303,303,303,287,287,302,303,303,303,303,303,302,303,287,302,287,287,302,303,287,302,287,302,303,302,303,302,302,302,287,303,287,287,302,303,287,303,287,302,287,303,287,302,287,287,302,287,287,287,302,303,302,302,302,303,287,303,302,302,303,302,287,287,302,303,302,302,302,287,303,287,287,287],
    [104,88,88,72,88,72,72,88,73,90,56,102,103,102,103,103,103,87,87,71,70,103,103,86,71,28,70,102,86,70,70,71,71,103,86,102,71,70,86,87,86,86,71,86,70,75,57,74,76,59,40,23,26,87,103,103,26,43,26,71,86,71,102,70,26,86,23,71,103,103,26,103,55,70,102,87,86,70,71,102,87,103,71,87,102,87,102,103,86,102,87,71,103,70,86,103,103,103,103,86,71,103,86,87,70,70,71,24,104,57,104,72,72,72,88,72,72,88,72,88,88,72,72,72,72,72,88,120,136,121,136,136,120,120,120,136,136,120,120,136,136,121,121,184,185,184,184,187,187,187,184,185,185,184,187,187,184,184,176,176,180,176,176,176,178,176,178,176,176,178,182,182,180,182,182,180,180,182,182,182,182,176,182,176,176,182,182,176,180,176,178,176,176,176,182,180,182,176,178,178,178,176,180,178,302,178,178,180,182,180,182,176,182,303,287,182,182,302,287,303,287,303,303,302,303,302,302,302,302,287,303,303,302,303,302,302,287,287,302,302,302,302,303,303,303,302,287,303,303,302,287,287,303,303,302,287,287,303,302,302,303,303,302,303,287,287,303,303,302,287,287,302,303,302,303,287,302,302,302,303,303,303,302,302,302,287,303,303,302,287,303,302,302,302,302,303,303,303,303,287],
    [104,72,104,88,88,88,72,72,88,38,39,92,70,70,70,87,71,86,87,102,23,86,102,103,87,28,87,70,102,103,103,102,86,86,23,87,71,71,71,71,70,86,102,71,102,76,72,40,58,60,57,26,26,86,23,86,102,25,25,103,23,26,87,86,70,71,86,23,86,102,86,70,55,86,71,103,103,103,70,71,103,86,87,87,71,71,87,87,103,71,86,102,87,102,86,87,86,70,71,70,102,86,102,103,102,71,103,24,58,58,88,72,88,88,72,88,72,104,72,72,72,104,104,104,72,88,104,88,121,121,121,136,121,121,121,136,136,136,120,121,120,121,121,184,184,184,184,187,187,187,184,187,187,187,187,184,185,185,180,182,178,182,182,176,180,176,176,176,182,182,178,180,178,180,178,180,180,178,180,176,182,178,178,180,182,178,182,178,180,180,182,182,180,176,176,176,180,180,178,180,287,178,287,182,180,287,303,303,178,303,287,303,303,180,180,176,178,303,302,302,302,287,287,302,303,303,302,302,303,302,287,302,303,302,287,303,303,302,303,287,302,303,287,303,287,303,302,302,302,303,303,303,287,302,302,302,303,302,287,303,287,303,303,302,302,302,303,287,303,302,302,303,287,302,303,302,302,302,303,302,287,287,287,303,303,302,287,287,302,303,302,303,302,303,302,302,287,303,303,302],
    [72,72,104,88,88,88,104,104,104,72,72,22,86,86,87,70,70,103,102,102,103,87,71,86,87,28,103,103,87,87,71,102,70,102,87,102,87,70,87,102,102,103,71,102,70,6,59,22,74,8,75,86,86,87,87,71,71,27,42,86,70,87,26,23,87,23,102,26,103,102,86,102,26,55,103,103,102,87,87,87,103,71,70,86,86,70,86,70,103,102,70,102,103,71,103,71,87,103,70,87,103,70,103,102,87,86,91,74,57,104,88,72,88,88,72,72,88,104,88,72,72,104,72,88,72,72,104,88,88,88,72,121,121,121,136,120,121,121,136,121,136,121,121,184,185,187,184,184,185,185,187,187,185,184,185,187,185,187,182,176,180,176,178,182,182,178,180,182,176,182,182,182,182,182,178,178,182,180,180,182,180,180,176,178,178,180,178,176,176,182,180,182,180,182,178,180,180,180,178,182,180,180,182,302,303,176,287,287,180,178,182,182,176,176,303,180,176,302,287,287,302,287,303,303,287,303,287,287,303,287,302,287,303,302,302,303,287,287,303,302,303,287,302,302,287,302,302,287,287,302,287,287,303,287,303,287,303,303,302,287,303,303,302,303,302,303,303,302,302,287,303,287,302,287,303,303,303,302,303,302,287,287,287,287,303,303,302,303,303,287,302,287,302,302,287,287,287,303,303,287],
    [88,72,72,88,104,104,88,104,88,72,88,22,102,70,103,102,103,71,70,103,103,86,102,86,70,28,70,102,71,71,103,86,103,87,70,103,86,102,102,87,86,70,23,71,104,59,24,8,22,6,38,103,23,86,103,71,87,9,11,71,103,70,70,102,103,26,103,23,71,71,26,71,71,71,70,87,86,102,71,71,102,102,70,70,70,102,71,102,87,102,86,71,70,71,87,71,87,102,86,86,86,70,102,103,86,71,24,72,74,88,104,72,72,88,72,104,104,72,88,88,88,88,104,88,88,104,88,72,88,72,72,136,121,121,121,136,136,136,136,120,120,121,121,184,184,184,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,176,302,180,303,182,180,287,176,178,182,303,180,176,303,180,182,287,287,287,303,303,303,302,303,287,302,287,302,302,287,302,303,303,303,302,303,287,287,287,287,302,287,303,303,287,302,302,303,302,287,303,303,287,287,302,303,287,303,303,302,302,303,302,287,302,303,287,287,287,287,287,303,287,287,303,303,303,287,287,287,287,287,303,287,303,302,302,303,287,302,287,302,302,287,303,303,302,303,303,303],
    [88,72,88,88,88,72,72,88,72,104,104,38,39,92,71,102,102,86,102,86,70,70,70,71,9,43,102,87,103,103,86,71,87,102,71,103,71,71,71,86,86,70,70,86,58,59,88,74,104,76,8,23,103,26,71,26,87,26,26,25,86,70,23,71,71,70,70,71,86,71,26,87,26,102,87,103,103,71,103,86,71,87,71,86,86,103,87,71,103,71,70,103,70,102,103,71,86,70,102,87,70,103,87,70,102,102,24,88,88,74,88,74,88,72,58,72,104,88,72,72,72,104,88,104,72,88,72,72,88,104,104,104,121,121,121,121,121,121,121,136,121,121,121,184,184,166,166,166,166,166,166,166,166,166,166,166,166,166,166,205,205,205,166,203,166,166,203,166,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,180,303,180,178,302,176,182,302,302,182,178,287,182,178,287,303,287,303,303,303,287,302,303,302,302,287,303,303,287,287,287,302,302,302,302,302,303,303,302,302,287,302,303,287,287,287,303,287,303,303,303,303,302,303,303,303,303,287,303,287,287,302,302,302,302,302,303,302,302,287,287,302,287,287,303,303,302,303,302,302,303,302,302,303,302,287,303,303,302,302,287,287,303,287,302,303,287,287,303,303],
    [72,88,88,72,72,104,104,72,88,104,104,88,88,38,92,86,86,102,103,103,71,103,102,102,28,70,103,102,86,23,71,70,71,86,102,103,87,71,71,70,70,86,103,102,40,40,58,40,38,88,6,7,87,23,23,102,88,26,25,9,23,103,87,87,86,71,71,87,86,26,87,102,70,87,71,70,86,71,70,103,87,86,86,86,86,70,102,102,71,103,86,103,71,87,103,86,70,86,102,87,86,70,87,71,87,102,24,88,73,104,57,58,57,58,74,88,88,88,104,88,104,88,104,104,104,88,104,88,88,104,104,121,136,121,121,121,121,121,121,121,121,121,121,184,166,130,166,166,166,130,166,166,166,130,166,166,166,130,203,203,205,166,203,166,203,203,166,205,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,130,180,176,302,176,180,176,303,303,182,180,178,302,303,303,180,180,302,302,287,287,303,303,287,287,287,287,303,287,287,303,302,287,287,303,302,303,303,287,303,303,302,287,303,287,302,303,302,287,303,302,303,302,303,303,303,303,302,302,287,302,303,302,303,303,287,287,302,302,302,303,302,303,302,287,302,302,287,303,302,302,303,302,303,302,287,302,287,303,303,302,287,303,302,287,302,287,303,303,287,287],
    [88,88,88,72,104,72,72,72,6,7,7,7,7,7,106,11,103,86,87,102,71,71,87,86,28,86,71,86,103,103,103,102,70,71,71,86,87,70,102,71,71,86,71,71,38,24,24,60,60,40,57,39,86,87,71,26,88,26,41,9,23,102,23,102,70,70,26,86,26,87,70,86,103,102,86,87,103,102,70,86,70,86,71,86,71,87,71,103,70,102,70,102,71,71,86,103,70,102,71,86,70,70,86,70,102,103,107,7,7,7,7,8,72,104,58,104,104,72,104,72,72,104,72,104,104,121,121,121,121,136,121,120,120,121,121,121,121,121,121,121,121,121,121,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,203,166,205,166,205,203,203,203,203,203,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,178,180,182,176,303,178,182,182,180,182,287,303,180,176,182,303,287,303,287,303,302,303,302,302,303,303,287,302,287,303,303,287,303,287,302,303,303,302,287,303,287,287,287,287,303,287,287,302,303,303,287,303,303,302,303,302,303,287,303,302,302,303,302,287,302,302,303,287,303,302,302,302,287,302,302,287,302,302,303,287,303,287,287,287,287,287,287,287,302,287,287,287,287,302,287,287,302,302,302,303],
    [88,72,72,88,72,72,104,88,22,71,70,23,102,102,87,28,103,86,91,39,39,39,39,92,28,91,39,39,39,39,39,39,92,70,70,102,103,71,71,103,70,70,103,88,57,73,6,38,57,38,72,8,70,23,23,86,88,42,9,10,43,71,26,103,26,87,86,87,102,23,103,102,87,102,70,23,102,86,70,102,103,87,71,87,103,103,103,70,87,70,70,87,87,87,102,103,87,86,70,102,70,86,103,70,86,86,103,86,71,86,103,24,58,72,72,88,104,104,72,88,72,104,88,121,136,120,121,121,120,136,136,121,121,121,121,121,121,121,121,121,121,121,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,203,203,205,203,166,203,203,205,203,203,201,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,178,178,303,182,302,178,178,302,182,180,287,182,287,182,182,287,303,287,287,287,302,287,303,303,303,303,302,303,303,302,302,287,303,302,302,302,287,287,302,287,303,303,303,302,302,287,302,302,287,302,303,303,287,303,287,302,303,287,302,303,303,287,303,303,302,303,303,287,287,287,302,287,302,302,303,303,287,302,302,303,287,303,303,287,302,287,287,303,287,287,287,287,303,303,303,287,303,302,303,302]
]
let tilesPerRow;
let tileSize;
let starting_row;
let end_row;
let end_col;
let shift_down;
let shift_left;

let next_round;


let player;

let unlocked_weapons;

let coin_color;

// Weapons
let damage_modifier;
    // Pellet
let pellet;
let pellets;

let hearts;

let shop;

let sign;

let moveLeft;
let moveRight;
let moveUp;
let moveDown;

let in_shop;

let player_counter;
let collision_counter;
let unconditional_counter;
let noted_counter;
let cooldown;

// win round
let winner;

// IMAGES
let playerImage = new Image();
let coinImage = new Image();

let enemy_healthbar_frame = new Image();
let enemy_healthbar = new Image();
let AshImage = new Image();

let enemyImage_skull = new Image();
let enemyImage_horse = new Image();

let BackgroundImageTileset = new Image();
let SignImage = new Image();

let ShopImage1 = new Image();
let ShopInterior1 = new Image();
let ShowroomImage = new Image();
let Podium = new Image();
let Selected_Podium = new Image();

let Spacebar = new Image();
let Enter = new Image();

let Heart_Image = new Image();
let Extra_Heart_Title = new Image();
let Extra_Heart_Description = new Image();

let Fox_Image = new Image();
let Fox_Title = new Image();
let Fox_Description = new Image();

let Beam_Weapon_Image = new Image();
let Beam_Title = new Image();
let Beam_Weapon_Description = new Image();




// AUDIO
let background_audio = new Audio();
let lose_audio = new Audio();
let player_hurt_audio = new Audio();
let firing_beam_audio = new Audio();
let hitmarker_audio = new Audio();
let spotlight_audio = new Audio();
let shop_audio = new Audio();
let purchase_audio = new Audio();





// ENEMIES

let enemies;
let active_enemies;
let enemy_randomiser;
let enemy_counter;
let ash_piles;
let enemy_amount;




// SHOP
let shop1_inventory;
// Possible Items in Shop
let fox;

let beam_weapon;

let extra_heart;
let extra_heart2;

let items;
let available_items;
let selected_item;
let selected_index;

if (document.querySelector("canvas") != null) {
    document.addEventListener("DOMContentLoaded", init, false)
}

function init() {
    canvas = document.querySelector("canvas");
    canvas.width = 600;
    canvas.height = 300;

    context = canvas.getContext("2d");
    context.imageSmoothingEnabled = false; // Stops the sprite image from becoming blurry when idle
    

    score = 0;
    enemies_killed = 0;
    coins = 0;
    time_alive = 0;

    next_round = false;

    tilesPerRow = 16;
    tileSize = 16;
    starting_row = 8;
    end_row = 27;
    end_col = 103;
    shift_down = 24;
    shift_left = 0;


    player = {
        max_health: 300,
        health: 300,
        x: "canvas.width / 2 - player.width / 5",
        y: "canvas.height / 2 - player.height / 2",
        inner_x: 9,
        inner_y: 4,
        inner_width: 15,
        inner_height: 14,
        width: 106,
        height: 22,
        frameX: 0,
        frameY: 1,
        xChange: 0,
        yChange: 0,
        turned: false,
        shoot: false,
        weapon: "pellet",
        immune: false,
        speed: 0.8,
        bought_items: []
    };
    player.x = canvas.width / 2 - player.width / 5;
    player.y = canvas.height / 2 - player.height / 2;
    
    unlocked_weapons = ["pellet"];
    
    coin_color = "white";
    
    // Weapons
    damage_modifier = 100;
    pellets = [];
    
    hearts = [];
    
    shop = {
        x: "canvas.width / 2 - shop.inner_width",
        y: "-shop.height",
        inner_x: 56,
        inner_width: 88,
        inner_height: 111,
        width: 200,
        height: 149,
        frameX: 0,
        in_view: "no"
    }
    shop.x = canvas.width / 2 - shop.inner_width;
    shop.y = -shop.height;

    sign = {
        image: SignImage,
        x: 550,
        y: 250,
        width: 24,
        height: 22.5,
        opacity: 0.01
    }
    
    
    moveLeft = false;
    moveRight = false;
    moveUp = false;
    moveDown = false;
    
    in_shop = false;
    
    player_counter = 0;
    collision_counter = 0;
    unconditional_counter = 0;
    noted_counter = 0;
    cooldown = "off";
    
    winner = false;
    
    // ENEMIES
    
    enemies = ["skull", "horse"];
    active_enemies = [];
    enemy_randomiser = enemies[randint(0, enemies.length - 1)];
    enemy_counter = 0;
    ash_piles = [];
    enemy_amount = 10;
    
    
    
    
    // SHOP
    shop1_inventory = [];
    // Possible Items in Shop
    fox = {
        name: "Fox",
        image: Fox_Image,
        title_image: Fox_Title,
        description_image: Fox_Description,
        x: 300,
        y: 150,
        width: 32,
        height: 32,
        frameX: 0,
        frameY: 0,
    
        xChange: 3,
        yChange: 3,
        speed: 0.8,
    
        turned: false,
    
        shop_x: 85,
        shop_y: 65,
        shop_width: 120,
        shop_height: 120,
    
        cost: 1000,
        description: "A friendly fox to keep you company on your adventure. It pounces at enemies when close, dealing a small amount of damage."
    }
    
    beam_weapon = {
        name: "Beam",
        image: Beam_Weapon_Image,
        title_image: Beam_Title,
        description_image: Beam_Weapon_Description,
        width: 500,
        height: 500,
        frameX: 0,
        frameY: 0,
        shop_x: 90,
        shop_y: 75,
        shop_width: 130,
        shop_height: 130,
    
        cost: 250,
        description: "An energy blaster that emits a devastating beam of energy to enemies. Must be charged up before firing."
    }
    
    extra_heart = {
        name: "Extra Heart",
        image: Heart_Image,
        title_image: Extra_Heart_Title,
        description_image: Extra_Heart_Description,
        width: 56,
        height: 47,
        frameX: 0,
        frameY: 0,
        shop_x: 105,
        shop_y: 105,
        shop_width: 85,
        shop_height: 75,
    
        cost: "player.max_health * 2 * (player.health/player.max_health)",
        description: "An extra heart to increase your max health."
    }
    extra_heart2 = {
        name: "Extra Heart2",
        image: Heart_Image,
        title_image: Extra_Heart_Title,
        description_image: Extra_Heart_Description,
        width: 56,
        height: 47,
        frameX: 0,
        frameY: 0,
        shop_x: 105,
        shop_y: 105,
        shop_width: 85,
        shop_height: 75,
    
        cost: "player.max_health * 2 * (player.health/player.max_health)",
        description: "An extra heart to increase your max health."
    }
    
    items = [extra_heart, extra_heart2, fox, beam_weapon];
    available_items = [extra_heart, extra_heart2, fox, beam_weapon];
    selected_index = 1;


    for (let times = 0; times < available_items.length + 2; ++times) { // 3 items per shop
        let chosen_item = available_items[randint(0, available_items.length - 1)]; // Pick random item
        shop1_inventory.push(chosen_item); // add to shop's inventory
        let index = available_items.indexOf(chosen_item); // find the index of this item in available_items list
        available_items.splice(index, 1); // remove this item from the choice pool to prevent the same item from being offered twice, save for the extra_hearts
    }

    // console.log("Shop 1's Inventory: " + shop1_inventory[0].name + ", " + shop1_inventory[1].name + ", " + shop1_inventory[2].name)

    // Movement
    window.addEventListener("keydown", activate, false)
    window.addEventListener("keyup", deactivate, false)

    // Form Submission on Defeat
    form = document.querySelector("form");
    username = document.querySelector("form > input:first-of-type");
    form.addEventListener("submit", store_data, false);

    load_assets([
        { "var": BackgroundImageTileset, "url": "/static/Assets/Tileset/tiles.png" },
        { "var": SignImage, "url": "/static/Assets/Tileset/next_stage_sign.png" },

        { "var": playerImage, "url": "/static/Assets/Player/player.png" },
        { "var": coinImage, "url": "/static/Assets/Player/coin.png" },

        { "var": enemy_healthbar_frame, "url": "/static/Assets/Player/Enemy Healthbar Frame.png"},
        { "var": enemy_healthbar, "url": "/static/Assets/Player/Enemy Healthbar.png"},

        { "var": enemyImage_skull, "url": "/static/Assets/Enemies/fire-skull.png" },
        { "var": enemyImage_horse, "url": "/static/Assets/Enemies/nightmare_horse.png" },

        { "var": AshImage, "url": "/static/Assets/Enemies/Ash.png" },

        { "var": ShopImage1, "url": "/static/Assets/Tileset/Shop1.png" },
        { "var": ShopInterior1, "url": "/static/Assets/Tileset/Shop1_BG.png" },
        { "var": ShowroomImage, "url": "/static/Assets/Tileset/black spotlight.png" },
        { "var": Podium, "url": "/static/Assets/Tileset/Shop_Podium.png" },
        { "var": Selected_Podium, "url": "/static/Assets/Tileset/Shop_Podium_Selected.png" },

        { "var": Spacebar, "url": "/static/Assets/Player/spacebar_icon.png"},
        { "var": Enter, "url": "/static/Assets/Player/enter_icon.png"},

        { "var": Heart_Image, "url": "/static/Assets/Player/hearts.png" },
        { "var": Extra_Heart_Description, "url": "/static/Assets/Player/Extra_Heart_Description.png"},
        { "var": Extra_Heart_Title, "url": "/static/Assets/Player/Extra_Heart_Title.png" },

        { "var": Fox_Image, "url": "/static/Assets/Player/Fox Sprite Sheet.png"},
        { "var": Fox_Description, "url": "/static/Assets/Player/Fox_Description.png"},
        { "var": Fox_Title, "url": "/static/Assets/Player/Fox_Title.png"},

        { "var": Beam_Weapon_Image, "url": "/static/Assets/Player/Energy Beam Weapon.png"},
        { "var": Beam_Weapon_Description, "url": "/static/Assets/Player/Beam_Description.png"},
        { "var": Beam_Title, "url": "/static/Assets/Player/Beam_Title.png"},

        { "var": background_audio, "url": "/static/Assets/Audio/" + background_song},
        { "var": lose_audio, "url": "/static/Assets/Audio/Doors OST Curious Light.mp3"},
        { "var": player_hurt_audio, "url": "/static/Assets/Audio/SFX/hurt.wav"},
        { "var": firing_beam_audio, "url": "/static/Assets/Audio/SFX/Firing Beam.mp3"},
        { "var": hitmarker_audio, "url": "/static/Assets/Audio/SFX/Hitmarker.wav"},
        { "var": spotlight_audio, "url": "/static/Assets/Audio/SFX/Spotlight.mp3"},
        { "var": shop_audio, "url": "/static/Assets/Audio/Raving_Rabbids_OST.mp3"},
        { "var": purchase_audio, "url": "/static/Assets/Audio/SFX/Purchase.wav"}
    ], draw);

    // Accompanying Developer Music
    background_audio.currentTime = randint(0, 60);
    background_audio.play();
    background_audio.addEventListener('ended', function() {
        background_audio.currentTime = 0;
        background_audio.play();
    });
    console.log("Playing " + background_song);


    setInterval(incrementSeconds, 1000);
}







function draw() {
    game_animation = window.requestAnimationFrame(draw);
    if (!winner && !next_round && player.health > 0) {
        score += 1;
    }

    fpsInterval = 50;
    let now = Date.now();
    let elapsed = now - then;
    if (elapsed <= fpsInterval) {
        return;
    }
    then = now - (elapsed % fpsInterval);


    // Clear Canvas
    context.clearRect(0, 0, canvas.width, canvas.height);

    // Draw Enemy Counter that will be covered over once round ends
    context.font = "20px Arial";
    context.fillText("Enemies Remaining: " + enemy_amount, -210 + ((unconditional_counter) % (canvas.width + 210)), canvas.height - 5);

    // Draw background on canvas
    for (let r = starting_row; r < end_row; r += 1) {
        for (let c = 0; c < terrain_background[0].length; c += 1) {
            let tile = terrain_background[r][c];
            if (tile >= 0) {
                let tileRow = Math.floor(tile / tilesPerRow);
                let tileCol = Math.floor(tile % tilesPerRow);
                context.drawImage(BackgroundImageTileset,
                                                tileCol * tileSize,
                                                tileRow * tileSize,
                                                tileSize,
                                                tileSize,
                        
                                                c * (tileSize / 1.06) - shift_left, 
                                                r * (tileSize / 1.2) - (3.4 * shift_down),
                                                tileSize / 1.06,
                                                tileSize / 1.2)
        }
    }
}

    // Draw shop building
    context.drawImage(ShopImage1,
        shop.width * shop.frameX,
        0,
        shop.width,
        shop.height,
        
        shop.x, shop.y, shop.width, shop.height)

    // Draw Ash Piles
    for (let ash_pile of ash_piles) {
        context.drawImage(AshImage,
            0,
            0,
            30,
            13,
    
            ash_pile.x, ash_pile.y, ash_pile.width, ash_pile.inner_height
            );
    }

    // Draw Pet
    if (player.bought_items.includes("Fox")) {
        context.drawImage(Fox_Image,
            fox.width * fox.frameX,
            fox.height * fox.frameY,
            fox.width,
            fox.height,
            
            fox.x, fox.y, fox.width, fox.height)
    };

    // Draw Player
    context.drawImage(playerImage,
        player.width * player.frameX, // starting left-hand side
        player.height * player.frameY, // starting left-hand top
        player.width,
        player.height,

        player.x, player.y, player.width, player.height
    );

    // Draw Weapon's Bullets/Particles
    if (player.weapon == "pellet") {
        context.fillStyle = "yellow";
        for (let pellet of pellets) {
            context.fillRect(pellet.x, pellet.y, pellet.width, pellet.height)
        }
    }


    // Create Enemies
    if (active_enemies.length < enemy_amount) {
        enemy_counter += 1;
        if (enemy_randomiser == "skull") {
            let enemy = {
                type : "skull",
                image_name : enemyImage_skull,
                max_health: 100,
                health: 100,
                damage: 50,
            
                hit_score: 20,
                kill_score: 200,
                coin_value: 543,
            
                x: canvas.width - ((canvas.width) * randint(0,1)), // from right or left-hand side
                y: randint(50, canvas.height - 50),
                inner_x: 7,
                inner_y: 12,
                inner_width: 8,
                inner_height: 13,
                width: 25,
                height: 29,
                frameX: 0,
                frameY: 0,
                xChange: (2 + randint(0, 1)) - (4 * randint(0, 1)),
                yChange: 2 - (4 * randint(0, 1)),
            
                counter: 0  // for slower animations
            };
            active_enemies.push(enemy);
        }
        else if (enemy_randomiser == "horse") {
            let enemy = {
                type : "horse",
                image_name : enemyImage_horse,
                max_health: 300,
                health: 300,
                damage: 100,
            
                hit_score: 50,
                kill_score: 500,
                coin_value: 250,
            
                x: canvas.width + 50, // from right or left-hand side
                y: randint(50, canvas.height - 70),
                inner_x: 8,
                inner_y: 19,
                inner_width: 43,
                inner_height: 28,
                width: 72,
                height: 48,
                frameX: 0,
                frameY: 0,
                xChange: -15,
            
                counter: 0  // for slower animations
            }
            active_enemies.push(enemy);
        }
        enemy_randomiser = enemies[randint(0, enemies.length - 1)];
    }
        
    // WIN Round!
    else if (active_enemies.length == 0 && !winner && !next_round) {
        winner = true;
    }


    // Draw Enemies
    for (let enemy of active_enemies) {
        context.drawImage(enemy.image_name,
                          enemy.width * enemy.frameX,
                          enemy.height * enemy.frameY,
                          enemy.width,
                          enemy.height,

                          enemy.x, enemy.y, enemy.width, enemy.height
        );
        context.drawImage(enemy_healthbar_frame,
                                         0,
                                         0,
                                         47,
                                         7,
                                         
                                         enemy.x,
                                         enemy.y + enemy.height + 1,
                                         enemy.width,
                                         5
        );
        context.drawImage(enemy_healthbar,
            0,
            0,
            23,
            5,
            
            enemy.x + 1,
            enemy.y + enemy.height + 2,
            (enemy.width - 2) * (enemy.health/enemy.max_health),
            3
);
    }


    // Draw Interior of shop + items
    if (in_shop == true) {
        extra_heart.cost = player.max_health * 2 * (player.health/player.max_health);
        extra_heart2.cost = player.max_health * 2 * (player.health/player.max_health);
        selected_item = shop1_inventory[selected_index];
        context.drawImage(ShowroomImage, 0, 0, canvas.width, canvas.height)
        if (unconditional_counter >= 70) {  // Comes first so that background of shop is in the background, not in front of the items
            context.drawImage(ShopInterior1, 0, 0, canvas.width, canvas.height)
            
            context.fillStyle = "white";
            context.font = "Arial 40px";
            context.fillText("Purchase", 140, 25);
            context.drawImage(Spacebar, 230, 0, 40, 40);

            context.fillText("Exit", 320, 25);
            context.drawImage(Enter, 365, 4, 30, 30);
            shop_audio.play();
        }
        if (unconditional_counter == 10) {
            spotlight_audio.currentTime = 0;
            spotlight_audio.play();
        }
        if (unconditional_counter >= 10) {
            if (selected_item == shop1_inventory[0]) {
                context.drawImage(Selected_Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 20,
                                                 150,
                                                 250,
                                                 250
                );
            }
            else {
                context.drawImage(Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 20,
                                                 150,
                                                 250,
                                                 250
                );
            }
            if (!player.bought_items.includes(shop1_inventory[0].name)) {
                context.drawImage(shop1_inventory[0].image,
                                shop1_inventory[0].width * shop1_inventory[0].frameX,
                                shop1_inventory[0].height * shop1_inventory[0].frameY,
                                shop1_inventory[0].width,
                                shop1_inventory[0].height,
                                
                                shop1_inventory[0].shop_x,
                                shop1_inventory[0].shop_y,
                                shop1_inventory[0].shop_width,
                                shop1_inventory[0].shop_height
                                );
                }
        }
        if (unconditional_counter == 30) {
            spotlight_audio.currentTime = 0;
            spotlight_audio.play();
        }
        if (unconditional_counter >= 30) {
            if (selected_item == shop1_inventory[1]) {
                context.drawImage(Selected_Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 170,
                                                 140,
                                                 255,
                                                 255
                              );
            }
            else {
                context.drawImage(Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 170,
                                                 140,
                                                 255,
                                                 255
                    );
            }
            if (!player.bought_items.includes(shop1_inventory[1].name)) {
                context.drawImage(shop1_inventory[1].image,
                                shop1_inventory[1].width * shop1_inventory[1].frameX,
                                shop1_inventory[1].height * shop1_inventory[1].frameY,
                                shop1_inventory[1].width,
                                shop1_inventory[1].height,
                                
                                shop1_inventory[1].shop_x + 150,
                                shop1_inventory[1].shop_y - 3,
                                shop1_inventory[1].shop_width,
                                shop1_inventory[1].shop_height
                                );
            }
        }
        if (unconditional_counter == 50) {
            spotlight_audio.currentTime = 0;
            spotlight_audio.play();
        }
        if (unconditional_counter >= 50) {
            if (selected_item == shop1_inventory[2]) {
                context.drawImage(Selected_Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 320,
                                                 150,
                                                 250,
                                                 250);
            }
            else {
                context.drawImage(Podium,
                                                 0,
                                                 0,
                                                 500,
                                                 500,
                                                 
                                                 320,
                                                 150,
                                                 250,
                                                 250);
            }
            if (!player.bought_items.includes(shop1_inventory[2].name)) {
                context.drawImage(shop1_inventory[2].image,
                                shop1_inventory[2].width * shop1_inventory[2].frameX,
                                shop1_inventory[2].height * shop1_inventory[2].frameY,
                                shop1_inventory[2].width,
                                shop1_inventory[2].height,
                                
                                shop1_inventory[2].shop_x + 300,
                                shop1_inventory[2].shop_y,
                                shop1_inventory[2].shop_width,
                                shop1_inventory[2].shop_height
                                );
            }
        }
        if (unconditional_counter > 70) {
            if (!player.bought_items.includes(shop1_inventory[0].name)) {
                context.drawImage(coinImage, 0, 0, 7, 8,
                                                                    105, 197, 20, 23);
                context.fillText(shop1_inventory[0].cost, 130, 216)
            }

            if (!player.bought_items.includes(shop1_inventory[1].name)) {    
                context.drawImage(coinImage, 0, 0, 7, 8,
                                                                    260, 188, 20, 23);
                context.fillText(shop1_inventory[1].cost, 285, 207)
            }

            if (!player.bought_items.includes(shop1_inventory[2].name)) {    
                context.drawImage(coinImage, 0, 0, 7, 8,
                                                                    410, 197, 20, 23);
                context.fillText(shop1_inventory[2].cost, 435, 216)
            }

            if (selected_item == shop1_inventory[0] && !player.bought_items.includes(shop1_inventory[0].name)) {
                context.drawImage(shop1_inventory[0].title_image, 55, 25, 180, 70);
                context.drawImage(shop1_inventory[0].description_image, 0, 225, 600, 75);
            }
            else if (selected_item == shop1_inventory[1] && !player.bought_items.includes(shop1_inventory[1].name)) {
                context.drawImage(shop1_inventory[1].title_image, 210, 25, 180, 70);
                context.drawImage(shop1_inventory[1].description_image, 0, 225, 600, 75);
            }
            else if (selected_item == shop1_inventory[2] && !player.bought_items.includes(shop1_inventory[2].name)) {
                context.drawImage(shop1_inventory[2].title_image, 360, 25, 180, 70);
                context.drawImage(shop1_inventory[2].description_image, 0, 225, 600, 75);
            }
        }
    }

    // Create Hearts & Draw
    if (hearts.length < player.max_health / 100) {
        for (let heart_number = (hearts.length * 100); heart_number < player.max_health; heart_number += 100) {
                let heart = {
                    width: 56,
                    height: 47,
                    frameX: 0,
                    beat: 0,
                }
                hearts.push(heart);
            }
        }
    if (player.health >= 0) {
        let health_lost = (player.max_health - player.health)
        switch (health_lost) {
            case 50:
                hearts[0].frameX = 1;
                break;
            case 100:
                hearts[0].frameX = 2;
                break;
            case 150:
                hearts[0].frameX = 2;
                hearts[1].frameX = 1;
                break;
            case 200:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                break;
            case 250:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                hearts[2].frameX = 1;
                break;
            case 300:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                hearts[2].frameX = 2;
                break;
            case 350:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                hearts[2].frameX = 2;
                hearts[3].frameX = 1;
                break;
            case 400:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                hearts[2].frameX = 2;
                hearts[3].frameX = 2;
                break;
            case 450:
                hearts[0].frameX = 2;
                hearts[1].frameX = 2;
                hearts[2].frameX = 2;
                hearts[3].frameX = 2;
                hearts[4].frameX = 1;
                break;
            case 500:
                hearts.forEach(function(heart) {
                    heart.frameX = 2;
                });
                break;
            default:
                hearts.forEach(function(heart) {
                    heart.frameX = 0;
                });
        }
    }
    else {
        hearts.forEach(function(heart) {
            heart.frameX = 2;
        });
    }

    // Draw UI
        // Hearts
    for (let heart of hearts) {
            context.drawImage(Heart_Image,
                                            heart.width * heart.frameX,
                                            0,
                                            heart.width,
                                            heart.height,
                                            
                                            (canvas.width - (hearts.length * 26)) + ((heart.width / 2.2) * hearts.indexOf(heart)),
                                            2,                                            
                                            (heart.width / 2.2) - heart.beat,
                                            (heart.height / 2.2) - heart.beat)

            if ((unconditional_counter - hearts.indexOf(heart)) % (25 - (3 * Math.floor(player.max_health / player.health))) == 0) {  // staggered heart-beat effect
                heart.beat = 2;

                if (heart.frameX == 2) {
                    heart.beat = 0;
                }
            
                if (heart.frameX == 1) {  // if half-heart, less of a heartbeat
                    heart.beat = 1;
                }
            }
            else if ((unconditional_counter - hearts.indexOf(heart)) % (25 - (3 * Math.floor(player.max_health / player.health))) == 2) {
                heart.beat = 0;
            }
        }
        // Score
    context.fillStyle = "white";
    context.fillText("Score: " + score, 5, 20, 100, 10);
        // Coins
    context.fillStyle = "black";
    context.fillRect(5, 25, 65, 20);
    context.drawImage(coinImage,
                                     0,
                                     0,
                                     7,
                                     8,
                                     
                                     10,
                                     27,
                                     15,
                                     16);
    context.fillStyle = coin_color;  // not simply set to "white" so that it can be clear to players if they don't have enough money when going to purchase an item in the shop
    if (unconditional_counter % 30 == 0) {
        coin_color = "white";
    }
    context.fillText(coins, 27, 42, 40)



    // Player Movement & Physics
    // Moving
    if ((moveLeft || moveRight || moveUp || moveDown) && !(moveRight && moveLeft) && !player.immune) {
        player.frameY = 1;
        if (player.turned) {
            player.frameY = 6;
        }
        player.frameX = (player.frameX + 1) % 8;
    }
    // Idle
    if ((!(moveLeft || moveRight || moveUp || moveDown) || (moveRight && moveLeft) || (moveUp && moveDown)) && player.immune == false && !(player.health <= 0)) {
        if (player.weapon != "beam" || player.shoot == false) {

            if (player.frameY != 0 && player.frameY != 5) {
                player.frameX = 0;  // running-sprite row has 8 columns whereas the idle-sprite row only has 5
                if (player.turned) {
                    player.frameY = 5
                }
                else {
                    player.frameY = 0;
                }
            }
            
            player_counter += 1;
            if (player_counter % (5 - (Math.floor(player.max_health / player.health))) == 0) {
            player.frameX = (player.frameX + 1) % 5;
            }
        }

        player.xChange = player.xChange * 0.8; // Friction increased when stopped
        player.yChange = player.yChange * 0.8;
    }
    // Dead
    if (player.health <= 0) {
        death();
    }
    // Attacked
    else if (player.immune) {
        player.frameY = 3;
        if (player.turned) {
            player.frameY = 8;
        }
        player.frameX = (player.frameX + 1) % 2;
    }

    player.x += player.xChange;
    player.y += player.yChange;

    player.xChange = player.xChange * 0.95;
    player.yChange = player.yChange * 0.95;


    // Pet Movement
    pet_movement:
    if (player.bought_items.includes("Fox")) {
        // Death Animation
        if (player.health <= 0) {
            fox.frameY = 6;
            if (fox.turned) fox.frameY = 13;
            if (unconditional_counter % 10 == 0 && fox.frameX < 6) fox.frameX = (fox.frameX + 1);
            break pet_movement;
        }
        // Moving animation
        else if (((player.x + player.inner_x) - fox.x >= 30) || ((player.x + player.inner_x) - fox.x <= -20) || ((player.y + player.inner_y) - (fox.y + fox.height) >= 5) || (fox.y - (player.y + player.inner_y + player.inner_height) >= -15)) {
            if (unconditional_counter % 2 == 0) fox.frameX = (fox.frameX + 1) % 8;
            fox.xChange += 0.1;
            fox.yChange += 0.1;
        }
        // Idle animation
        else {
            fox.frameY = 1;
            if (fox.turned) fox.frameY = 8;
            if (unconditional_counter % 4 == 0) fox.frameX = (fox.frameX + 1) % 14;
            fox.xChange = 0.5;
            fox.yChange = 0.5;
        }

        // Face fox left
        if (fox.x > player.x + player.inner_x + player.inner_width) {
            turn("left", fox);
        }
        // Face fox right
        else if (fox.x + fox.width < player.x + player.inner_x) {
            turn("right", fox);
        }
        // right
        if ((player.x + player.inner_x) - fox.x >= 30) {
            fox.x += fox.xChange;
            fox.frameY = 2;
            if (fox.turned) fox.frameY = 9;
        }
        // left
        if ((player.x + player.inner_x) - fox.x <= -20) {
            fox.x -= fox.xChange;
            fox.frameY = 2;
            if (fox.turned) fox.frameY = 9;
        }
        // down
        if ((player.y + player.inner_y) - (fox.y + fox.height) >= 5) {
            fox.y += fox.yChange;
            fox.frameY = 2;
            if (fox.turned) fox.frameY = 9;
        }
        // up 
        if (fox.y - (player.y + player.inner_y + player.inner_height) >= -15) {
            fox.y -= fox.yChange;
            fox.frameY = 2;
            if (fox.turned) fox.frameY = 9;
        }
    }





    // Weapon Particle Movement
    if (player.weapon == "pellet") {
        for (let pellet of pellets) {
            pellet.x += pellet.xChange;
            pellet.damage = pellet.damage * 0.95 * damage_modifier;
            pellet.width -= 0.02;
            pellet.height -= 0.02;
            for (let enemy of active_enemies) {
                if (
                    ((!player.turned && 
                    ((pellet.x + pellet.width > enemy.x + enemy.inner_x) && (pellet.x < enemy.x + enemy.inner_x + enemy.inner_width))
                    )
                    || (player.turned &&
                    ((pellet.x < enemy.x + enemy.inner_x + enemy.inner_width) && (pellet.x + pellet.width > enemy.x + enemy.inner_x))
                    ))
                    && ((pellet.y + pellet.height > enemy.y + enemy.inner_y) && (pellet.y < enemy.y + enemy.inner_y + enemy.inner_height))
                    ) {
                    let index = pellets.indexOf(pellet);
                    pellets.splice(index, 1);
                    enemy_hit(enemy);
                }
            }
        }
    }

    // Enemy Movement
    for (let enemy of active_enemies) {
        if (enemy.type == "skull") {
                // linear motion
            enemy.x += enemy.xChange;
            enemy.y += enemy.yChange;

            if (enemy.xChange < 0) {
                enemy.frameY = 1;
            }
            enemy.counter += 1;
            if (enemy.counter % 3 == 0) {
    	            enemy.frameX = (enemy.frameX + 1) % 8;
    
            }
        }
        else if (enemy.type == "horse") {
            enemy.x += enemy.xChange;

            enemy.counter += 1;
            if (enemy.counter % 3 == 0) {
    	            enemy.frameX = (enemy.frameX + 1) % 4;
            }
        }
        else {
            // Follow Player
            if (player.x + player.inner_x + player.inner_width <= enemy.x + enemy.inner_x) {
                enemy.x -= enemy.xChange;
            }
            else if (player.x + player.inner_x >= enemy.x + enemy.inner_x + enemy.inner_width) {
                enemy.x += enemy.xChange;
            }

            if (player.y + player.height <= enemy.y) {
                enemy.y -= enemy.yChange;
            }
            else if (player.y >= enemy.y + enemy.height) {
                enemy.y += enemy.yChange;
            }
        }
    }

    // Ash Pile Movement 
    for (let ash_pile of ash_piles) {
        ash_pile.xChange = ash_pile.xChange * 0.75;
        if (ash_pile.y + ash_pile.height <= canvas.height) {
        ash_pile.yChange += 0.3;
        }
        ash_pile.x += ash_pile.xChange;
        ash_pile.y += ash_pile.yChange;
    }

    // Shop-Exterior Animation
    if (unconditional_counter % 3 == 0) {
        shop.frameX = (shop.frameX + 1) % 6;
    }

    // Shop Item Animations
    if (in_shop && shop1_inventory.includes(fox)) {  // Sleeping
        shop1_inventory[shop1_inventory.indexOf(fox)].frameY = 5;
        if (unconditional_counter % 15 == 0 || unconditional_counter % 20 == 0)
        shop1_inventory[shop1_inventory.indexOf(fox)].frameX = (shop1_inventory[shop1_inventory.indexOf(fox)].frameX + 1) % 5;
    }
    if (in_shop && shop1_inventory.includes(extra_heart)) {  // Heartbeat
        if (unconditional_counter % 25 == 0) {
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_x += 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_y += 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_width -= 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_height -= 2;
        }
        else if (unconditional_counter % 25 == 3) {
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_x -= 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_y -= 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_width += 2;
            shop1_inventory[shop1_inventory.indexOf(extra_heart)].shop_height += 2;
        }
    }



    // Player Bounds
    // Hit top
    if (player.y <= shift_down ) {
        player.y = shift_down;
    }
    // Hit bottom
    else if ((player.y + player.inner_y + player.inner_height) > canvas.height - shift_down) {
        player.y = canvas.height - player.inner_height - shift_down - 3;
    }
    // Hitting the edge of the canvas
    // left side
    if (player.x + player.inner_x + player.inner_width < 0) {
        player.x = canvas.width - player.inner_x;  // Come back at the right edge
    }
    // right side
    if (player.x + player.inner_x > canvas.width) {
        player.x = -(player.inner_x + player.inner_width);  // Come back at left edge
    }
    // when shop in view
    if (shop.in_view == "yes") {
        if ((player.y < shop.y + shop.inner_height - 10) && (player.x + player.inner_x > shop.x + shop.inner_x && player.x + player.inner_x + player.inner_width < shop.x + shop.inner_x + shop.inner_width)) {
            player.y = shop.y + shop.inner_height - 10;
        }
    }


    // Enemies' Bounds
    for (let enemy of active_enemies) {
        if (enemy.type == "skull") {
            // Hitting the edge of the canvas
            // left side
            if (enemy.x + enemy.inner_x + enemy.inner_width < 0) {
                enemy.x = canvas.width - enemy.inner_x;  // Come back at the right edge
            }
            // right side
            if (enemy.x > canvas.width) {
                enemy.x = -(enemy.inner_x + enemy.inner_width);  // Come back at left edge
            }
            // top
            if (enemy.y + enemy.inner_y <= shift_down) {
                enemy.yChange = -enemy.yChange;
            }
            // bottom
            if (enemy.y + enemy.inner_y + enemy.inner_height >= canvas.height - shift_down) {
                enemy.yChange = -enemy.yChange;
            }
        }
        else if (enemy.type == "horse") {
            // Hitting the edge of the canvas
            // left side
            if (enemy.x + enemy.inner_x + enemy.inner_width < -500 - (100 * active_enemies.indexOf(enemy))) {
                enemy.x = canvas.width - enemy.inner_x;  // Come back at the right edge
                enemy.y = randint(50, canvas.height - 70);
            }
        }
    }

    // Ash Pile Bounds
    for (let ash_pile of ash_piles) {
        if (ash_pile.y + ash_pile.inner_height > canvas.height) {
            ash_pile.yChange = 0;
            ash_pile.y = canvas.height - ash_pile.inner_height;
        }
    }


    if (moveLeft) {
        turn("left", player);
        player.xChange -= player.speed;  // Acceleration!
    }
    if (moveRight) {
        turn("right", player);
        player.xChange += player.speed;
    }
    if (moveUp) {
        player.yChange -= player.speed;
    }
    if (moveDown) {
        player.yChange += player.speed;
    }

    // Shooting
    if (player.shoot == true && !(player.health <= 0)) { // if player is currently shooting, mainly used for SFX
        if (player.weapon == "pellet") {

        }
        if (player.weapon == "beam") {
                if (!player.turned) {
                    player.frameY = 2;
                }
                else if (player.turned) {
                    player.frameY = 7;
                }

                if (player.frameX < 6) {
                    player_counter += 1;
                    if (player_counter == 1 || player_counter % 4 == 0) {
                        player.frameX += 1;
                    }
                }
                else if (player.frameX == 6) { // Alternate between instances of firing
                    if (firing_beam_audio.paused) {
                        firing_beam_audio.currentTime = 0;
                        firing_beam_audio.play();
                    }
                    player.frameX = 7;
                    for (let enemy of active_enemies) {
                        if (
                            ((!player.turned && 
                            ((enemy.x + enemy.inner_x > player.x + player.inner_x + player.inner_width) && (enemy.x + enemy.inner_x + enemy.inner_width < player.x + player.width))
                            )
                            || (player.turned && 
                            ((enemy.x + enemy.inner_x + enemy.inner_width < player.x + player.inner_x) && (enemy.x + enemy.inner_x + enemy.inner_width > player.x))
                            ))
                            && (((enemy.y + enemy.inner_y > player.y) && (enemy.y + enemy.inner_y < player.y + player.height)) || ((enemy.y + enemy.inner_y + player.inner_height > player.y + player.inner_y) && (enemy.y + enemy.inner_y + enemy.height < player.y + player.height)) || ((enemy.y + enemy.inner_y < player.y) && (enemy.y + enemy.inner_y + enemy.height > player.y + player.height))
                            )
                            ) {
                            enemy_hit(enemy);
                        }
                    }
                }
                else if (player.frameX == 7) { // Alternate between instances of firing
                    player.frameX = 6;
                    for (let enemy of active_enemies) {
                        if ((!player.turned && (((enemy.x + enemy.inner_x) > (player.x + player.inner_x + player.inner_width)) && ((enemy.x + enemy.inner_x + enemy.inner_width) < (player.x + player.width)) && (((enemy.y + enemy.inner_y > player.y) && ((enemy.y + enemy.inner_y) < (player.y + player.height))) || (((enemy.y + enemy.inner_y + player.inner_height) > player.y + player.inner_y) && ((enemy.y + enemy.inner_y + enemy.height) < (player.y + player.height))) || ((enemy.y + enemy.inner_y < player.y) && ((enemy.y + enemy.inner_y + enemy.height) > (player.y + player.height)))))) || (player.turned && ((((enemy.x + enemy.inner_x + enemy.inner_width) < (player.x + player.inner_x)) && ((enemy.x + enemy.inner_x + enemy.inner_width) > player.x)) && ((((enemy.y + enemy.inner_y) > player.y) && ((enemy.y + enemy.inner_y) < (player.y + player.height))) || (((enemy.y + enemy.inner_y + enemy.inner_height) > player.y + player.inner_y) && ((enemy.y + enemy.inner_y + enemy.height) < (player.y + player.height))) || (((enemy.y + enemy.inner_y) < player.y) && ((enemy.y + enemy.inner_y + enemy.height) > (player.y + player.height))))))) {
                            enemy_hit(enemy);
                        }
                    }
                }


                if (player.frameX == 12) {
                    player.shoot = false;
                    player.frameX = 0;
                }
            }
    }
    else if (player.shoot == "wind_down" ) { // Winding down of energy "beam" weapon
        if (player.frameX > 0) {
            player_counter -= 1
            player.frameX -= 1;
        }
        else {
            player.shoot = false;
        }
    };

    // Enemy attacks Player
    if (player.immune == false) {
        for (let enemy of active_enemies) {
            // if in range
            if ((((player.x + player.inner_x < enemy.x + enemy.width) && ( player.x + player.inner_x > enemy.x + enemy.inner_x)) || ((player.x + player.inner_x + player.inner_width > enemy.x) && (player.x + player.inner_x < enemy.x + enemy.inner_x))) && (((player.y + player.inner_y > enemy.y) && (player.y + player.inner_y < enemy.y + enemy.inner_y + enemy.inner_height)) || ((player.y + player.inner_y + player.inner_height > enemy.y + enemy.inner_y) && (player.y + player.inner_y + player.inner_height < enemy.y + enemy.height)))) {
                    noted_counter = unconditional_counter;
                    player.immune = true;
                    player.frameX = 0;
                    if (player.weapon == "beam") {
                        firing_beam_audio.currentTime = 3.5;
                    }
                    if (player.health > 0) {
                        player_hurt_audio.play();
                        player.health -= enemy.damage;
                    }
                    console.log("An enemy hit you! Player health is now " + player.health)
            }
        }
    }
    if (unconditional_counter == noted_counter + 30) {
        player.immune = false;
    }



    if (winner) {
        player.health = player.max_health;

        if (starting_row > 0 && unconditional_counter % 5 == 0) {
            starting_row -= 1;
        }
        
        if (shift_down > 2) {
            shift_down -= 0.3;
            player.y += 1;
            shop.y += 1.8;
            shop.in_view = "yes"
        }
        else if (!in_shop) {
            context.globalAlpha = sign.opacity;
            context.drawImage(sign.image, sign.x, sign.y, sign.width, sign.height)
            sign.opacity += 0.01;
            context.globalAlpha = 1;
        }
    }
    else if (next_round) {
        if (shift_down == 24 && starting_row < 8 && unconditional_counter % 4 == 0) {
            starting_row += 1;
        }
        
        if (shift_down != 24) {
            shift_down += 0.3;
            player.y -= 1;
            shop.y -= 1.8;
            sign.y -= 1;
            shop.in_view = "no"
        }


        if (starting_row == 8 && shift_left < (4 * canvas.width)) shift_left += 4;

        else if (shift_left >= (4 * canvas.width)) enemy_amount += 1;
        if (enemy_amount == 20) next_round = false;
    }

    unconditional_counter += 1;
    // END OF DRAW()
}



function activate(event) {  // 🟢
    let key = event.key;

    switch (key) {
        case "a":
        case "ArrowLeft":
            if (!(player.weapon == "beam" && player.shoot == true) && !in_shop && !(player.health <= 0)) {
                moveLeft = true;
            }
            else if (in_shop) {
                selected_index -= 1;
                if (selected_index == -1) {selected_index = 2;}
            }
            break; // would go through each case until it reaches a break if this wasn't here. Therefore, each case is its own if statement. By inserting a break at the end of each one, the cases become 'else if' statements.
        case "d":
        case "ArrowRight":
            if (!(player.weapon == "beam" && player.shoot == true) && !in_shop && !(player.health <= 0)) {
                moveRight = true;
            }
            else if (in_shop) {
                selected_index += 1;
                if (selected_index == 3) {selected_index = 0;}
            }
            break;
        case "w":
        case "ArrowUp":
            if (!(player.weapon == "beam" && player.shoot == true) && !in_shop && !(player.health <= 0)) {
                moveUp = true;
            }
            break;
        case "s":
        case "ArrowDown":
            if (!(player.weapon == "beam" && player.shoot == true) && !in_shop && !(player.health <= 0)) {
                moveDown = true;
            }
            break;
        case " ":
            if (player.shoot == false && winner != true && !(player.health <= 0)) { // Shoot
                if (player.weapon == "beam") {
                    firing_beam_audio.pause();
                    firing_beam_audio.currentTime = 0;
                    player.frameX = 0;
                    moveUp = moveRight = moveLeft = moveDown = false;
                }
                if (player.weapon == "pellet") {
                    // Fire (create) new pellet
                    pellet = {
                        x: player.x + player.inner_x + player.inner_width - 2,
                        y: player.y + player.inner_y + player.inner_height / 2,
                        width: 2,
                        height: 2,
                        xChange: 10,
                        damage: 50
                    }
                    if (player.turned) { // Change direction of particle if facing left
                        pellet.xChange = -pellet.xChange;
                        pellet.x = player.x + player.inner_x + 2;
                    }
                    pellets.push(pellet)
                }
                player.shoot = true;
            }

            if (in_shop && coins >= shop1_inventory[selected_index].cost && !player.bought_items.includes(shop1_inventory[selected_index].name) && unconditional_counter > 70) { // Purchase something from shop
                purchase_audio.play();
                coins -= shop1_inventory[selected_index].cost;
                purchase(shop1_inventory[selected_index]);
            }
            else if (in_shop && !(coins >= shop1_inventory[selected_index].cost && unconditional_counter > 70)) { // if player has insufficient funds
                coin_color = "red"
                // play error sound
            }

            if (winner && shift_down <= 2 && player.x + player.inner_x > 500 && player.y > 225) { // Proceed to next round
                next_round = true;
                winner = false;
                console.log("next round commencing?")
            }
            break;
        case "Enter":
            if (shop.in_view == "yes" && !in_shop && ((player.y > shop.y + shop.inner_height - 15 && player.y + player.inner_y + player.inner_height < shop.y + shop.height) && (player.x + player.inner_x < shop.x + shop.inner_x + shop.inner_width && player.x + player.inner_x > shop.x + shop.inner_x))) {  // Enter Shop
                in_shop = true;
                background_audio.pause();
                unconditional_counter = -1; // To create a staggered presentation of items on sale in shop
            }
            else if (in_shop) {
                in_shop = false; // Exit shop
                shop_audio.pause();
                background_audio.play();
            }
            break;
        case "Escape":
            if (in_shop) in_shop = false;
            break;
        case "c":
            if (unlocked_weapons.indexOf(player.weapon) == unlocked_weapons.length - 1) player.weapon = unlocked_weapons[0];
            else player.weapon = unlocked_weapons[unlocked_weapons.indexOf(player.weapon) + 1];
            
            switch (player.weapon) {
                case "pellet":
                    pellet.damage = 50 * damage_modifier;
                    break;
                case "beam":
                    player.damage = 15 * damage_modifier;
                    break;
            }
            break;
    }
}

function deactivate(event) { // 🔴
    let key = event.key;

    switch (key) {
        case "a":
        case "ArrowLeft":
            moveLeft = false;
            break;
        case "d":
        case "ArrowRight":
            moveRight = false;
            break;
        case "w":
        case "ArrowUp":
            moveUp = false;
            break;
        case "s":
        case "ArrowDown":
            moveDown = false;
            break;
        case " ":
            player.shoot = false;
            if (player.weapon == "beam") {
                
                firing_beam_audio.currentTime = 3.5
                if (!winner && !(player.health > 0)) {                
                    player_counter = 10;
                    player.shoot = "wind_down"; // Power down energy weapon
                }
            }
    }
}

function turn(position, object) {
    if (position == "left") {
        if (object.turned == false && object == player) {
            object.x -= object.width - object.inner_x - object.inner_width;
        }

        object.turned = true;

        if (object == player) {
            object.frameY = 6;
            object.inner_x = 80;
        }
        else if (object == fox) {
            object.frameY = 8;
        }
    }
    else if (position == "right") {
        
        if (object.turned == true && object == player) {
            object.x += object.inner_x;
        }

        object.turned = false;
        
        if (object == player) {
            object.frameY = 1;
            object.inner_x = 9;
        }
    }
}

// Player hits Enemy
function enemy_hit(enemy) {

    console.log("DIRECT HIT!");

    hitmarker_audio.currentTime = 0;
    hitmarker_audio.play();

    score += enemy.hit_score;

    if (player.weapon == "pellet") {
        enemy.health -= pellet.damage;
    }
    else enemy.health -= player.damage;

    if (enemy.health <= 0) { // killed enemy
        enemies_killed += 1;
        score += enemy.kill_score;
        coins += enemy.coin_value;
        let index = active_enemies.indexOf(enemy);
        active_enemies.splice(index, 1);
        enemy_amount -= 1;
        if (player.x + player.inner_x + player.inner_width < enemy.x && enemy.xChange < 0) {
            console.log("Changing xChange of enemy. Their xChange was " + enemy.xChange)
            enemy.xChange = enemy.xChange * -1;
            console.log("is now " + enemy.xChange)
        }
        else if (enemy.x + enemy.inner_x + enemy.inner_width < player.x + player.inner_x && enemy.xChange < 0) {
            enemy.xChange = -enemy.xChange;
        }
        enemy.y += enemy.height / 2;
        enemy.xChange = enemy.xChange * 5;
        enemy.yChange = -3;
        enemy.width = 30;
        enemy.height = 13;
        enemy.inner_height = 13 + randint(-5,5)
        ash_piles.push(enemy);
        }
}

function purchase(item) {
    player.bought_items.push(item.name);
    if (item == extra_heart || item == extra_heart2) {
        player.max_health += 100;
        player.health += 100;
    }
    else if (item == beam_weapon) {
        unlocked_weapons.push("beam");
    }
}


function death() {
    background_audio.pause();
    moveLeft = moveRight = moveUp = moveDown = player.shoot = false;
    player.frameY = 4;
    if (player.turned) {
        player.frameY = 9;
    }
    if (player.frameX < 4 && unconditional_counter % 6 == 0) {
        player.frameX += 1;
    }
    if (unconditional_counter % 45 == 0) {
        player.frameX = 0;
    }
    if (unconditional_counter % 50 == 0) {
        lose_audio.play()
    }

    let game_over_screen = document.getElementById("game_over"); // if it's not the first time a player has retried the game
    game_over_screen.style.cssText = "z-index: 1; animation: game_over_animation 10s; animation-fill-mode: forwards;"

    let retry_button = document.querySelector("#game_over > button");
    retry_button.addEventListener("click", function() {
        game_over_screen.style.cssText = "";
        lose_audio.pause();
        location.href = "/play";
    })


    if (score_display == undefined || enemy_count_display == undefined || time_alive_display == undefined) {
        score_display = document.getElementById("score");
        score_display.innerText = "Score: " + score;

        enemy_count_display = document.getElementById("enemies_killed");
        enemy_count_display.innerText = "Enemies Killed: " + enemies_killed;

        time_alive_display = document.getElementById("time_alive");
        time_alive_display.innerText = "Time Alive: " + (Math.floor(time_alive / 60) + "mins " + time_alive % 60 + "secs");
    }

}

function store_data(event) {
    let data = new FormData();
    data.append("name", username.value);
    data.append("score", score);
    data.append("enemies_killed", enemies_killed);
    data.append("time_alive", Math.floor(time_alive / 60) + "mins " + time_alive % 60 + "secs");

    xhttp = new XMLHttpRequest();
    xhttp.addEventListener("readystatechange", handle_response, false);
    xhttp.open("POST", "/store_score", true);
    xhttp.send(data);

    event.preventDefault();
}

function handle_response() {
    // Response Arrived?
    if (xhttp.readyState === 4) {
        // Request Successful?
        if (xhttp.status === 200) {
            if (xhttp.responseText === "success") {
                console.log("Data was stored successfully.");
                document.getElementById("tick").style.cssText = "opacity: 1;"
                document.querySelector("form > input:nth-of-type(2)").setAttribute("disabled", true);
            }
            else {
                console.log("Error. Data was not stored in database.")
            }
        }
    }
}




function incrementSeconds() {
    if (player.health > 0) time_alive += 1;
    else console.log(Math.floor(time_alive / 60) + "mins " + time_alive % 60 + "secs")
}


function load_assets(assets, callback_function) {  // Ensures assets (images/audio/etc.) are loaded before script is run
    let number_of_assets = assets.length;
    let loaded = function () {
        number_of_assets -= 1;
        if (number_of_assets === 0) {
            callback_function();  // Note that this does not call the function titled 'callback_function' but instead, the string name of a function is inserted here and the result is called. This is where the parameter is inserted.
        }
    };
    for (let asset of assets) {
        let element = asset.var;
        if (element instanceof HTMLImageElement) {
            console.log("Image Loaded:" + element);
            element.addEventListener("load", loaded, false);
        }
        else if (element instanceof HTMLAudioElement) {
            console.log("Audio Loaded:" + element);
            element.addEventListener("canplaythrough", loaded, false);
        };
        element.src = asset.url;
    };
};



function randint(min, max) {
    return Math.round(Math.random() * (max - min)) + min;
}


let pixel = 2;

function animate_indexPage() {
    setInterval(function() {
        pixel += 1;
        document.querySelector(":root").style.cssText = "--pixel: " + pixel + "px;";
    }, 50)
}
